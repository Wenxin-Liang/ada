mylm3_After$coefficients
#M-estimates of regression with Huber weights
mylm4_Bef <- rlm(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss)
mylm4_Bef$coefficients
mylm4_After <- rlm(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,stackloss_new)
mylm4_After$coefficients
IF <- influence.measures(mylm)
view(IF)
IF
IF <- influence.measures(mylm)
DFFITS1 <- IF$is.inf[,5]
DFBETAS1 <- IF$is.inf[,1:4]
HAT1 <- IF$is.inf[,8]
COOK1 <- IF$is.inf[,7]
which(DFFITS1 == TRUE)
which(DFBETAS1 == TRUE)
which(HAT1 == TRUE)
which(COOK1 == TRUE)
nrow(stackloss)
summary(stackloss)
stackloss
nrow(stackloss)
nrow(stackloss_new)
IF <- influence.measures(mylm1)
DFFITS1 <- IF$is.inf[,5]
DFBETAS1 <- IF$is.inf[,1:4]
HAT1 <- IF$is.inf[,8]
COOK1 <- IF$is.inf[,7]
which(DFFITS1 == TRUE)
which(DFBETAS1 == TRUE)
which(HAT1 == TRUE)
which(COOK1 == TRUE)
# Identify influential observations
# Identify influential observations using DFFITS
DFFITS <- dffits(mylm1)
which(abs(DFFITS) > 1)
# Index plot of DFFITS
n <- nrow(data)
plot(DFFITS)
text(1:n,dffits(mylm),lab=1:n)
# Identify influential observations using Cook's Distances
D <- cooks.distance(mylm)
which(D >= qf(.5, 4, 21-4)) # none clearly identified as influential (though
# Index plot of Cook's Distances
plot(D, ylab = "Cook's Distance")
# Identify influential observations using DFBETAS
DFBETAS <- dfbetas(mylm)
max.DFBETAS <- apply(abs(DFBETAS), 1, max)
which(max.DFBETAS > 1)
# Identify influential observations
# Identify influential observations using DFFITS
DFFITS <- dffits(mylm1)
which(abs(DFFITS) > 1)
# Index plot of DFFITS
n <- nrow(data)
plot(DFFITS)
text(1:n,dffits(mylm),lab=1:n)
# Identify influential observations using Cook's Distances
D <- cooks.distance(mylm1)
which(D >= qf(.5, 4, 21-4)) # none clearly identified as influential (though
# Index plot of Cook's Distances
plot(D, ylab = "Cook's Distance")
# Identify influential observations using DFBETAS
DFBETAS <- dfbetas(mylm1)
max.DFBETAS <- apply(abs(DFBETAS), 1, max)
which(max.DFBETAS > 1)
# Determine whether any leverages are large (i.e., larger than 2p/n)
h <- hatvalues(mylm1)
which(h >= 2 * 4/nrow(data))
# Identify influential observations
# Identify influential observations using DFFITS
DFFITS <- dffits(mylm1)
which(abs(DFFITS) > 1)
# Index plot of DFFITS
n <- nrow(data)
plot(DFFITS)
text(1:n,dffits(mylm),lab=1:n)
# Identify influential observations using Cook's Distances
D <- cooks.distance(mylm1)
which(D >= qf(.5, 4, 21-4)) # none clearly identified as influential (though
# Index plot of Cook's Distances
plot(D, ylab = "Cook's Distance")
# Identify influential observations using DFBETAS
DFBETAS <- dfbetas(mylm1)
max.DFBETAS <- apply(abs(DFBETAS), 1, max)
which(max.DFBETAS > 1)
# Determine whether any leverages are large (i.e., larger than 2p/n)
h <- hatvalues(mylm1)
which(h >= 2 * 4/21
）
h <- hatvalues(mylm1)
which(h >= 2 * 4/21）
h <- hatvalues(mylm1)
which(h >= 2 * 4/21)
# Identify influential observations
# Identify influential observations using DFFITS
DFFITS <- dffits(mylm1)
which(abs(DFFITS) > 1)
# Index plot of DFFITS
n <- nrow(data)
plot(DFFITS)
text(1:n,dffits(mylm),lab=1:n)
# Identify influential observations using Cook's Distances
D <- cooks.distance(mylm1)
which(D >= qf(.5, 4, 21-4)) # none clearly identified as influential (though
# Index plot of Cook's Distances
plot(D, ylab = "Cook's Distance")
# Identify influential observations using DFBETAS
DFBETAS <- dfbetas(mylm1)
max.DFBETAS <- apply(abs(DFBETAS), 1, max)
which(max.DFBETAS > 1)
# Determine whether any leverages are large (i.e., larger than 2p/n)
h <- hatvalues(mylm1)
which(h >= 2 * 4/21)
？rlm
?rlm
mylm4_Bef <- rlm(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss,scale.est="Huber")
mylm4_Bef$coefficients
mylm4_After <- rlm(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,stackloss_new,scale.est="Huber")
mylm4_After$coefficients
mylm2_Bef <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss)
mylm2_Bef$coefficients
mylm2_After <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,stackloss_new)
#lms1 <- lqs(stack.loss~.,data=stackloss_new,method ="lms")
#lms1$coefficients
mylm2_After$coefficients
plot(cvfit)
mylm2_After <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,stackloss_new)
lms1 <- lqs(stack.loss~.,data=stackloss_new,method ="lms")
lms1$coefficients
mylm2_After$coefficients
mylm2_After <- lmsreg(stack.loss~.,data=stackloss_new)
lms1 <- lqs(stack.loss~.,data=stackloss_new,method ="lms")
mylm2_After <- lmsreg(stack.loss~.,data=stackloss_new)
lms1 <- lqs(stack.loss~.,data=stackloss_new,method ="lms")
lms1$coefficients
mylm2_After$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After2 <- lmsreg(stack.loss~.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After2$coefficients
lms1 <- lqs(stack.loss~.,data=stackloss_new,method ="lms")
mylm2_After2$coefficients
lms1 <- lqs(stack.loss~.,data=stackloss_new,method ="lms")
lms1$coefficients
mylm2_After2 <- lmsreg(stack.loss~.,data=stackloss_new)
mylm2_After2$coefficients
lms1 <- lqs(stack.loss~.,data=stackloss_new,method ="lms")
lms1$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After1$coefficients
lms1 <- lqs(stack.loss~.,data=stackloss_new,method ="lms")
lms1$coefficients
lms1 <- lqs(stack.loss~.,data=stackloss_new,method ="lms")
lms1$coefficients
lms1 <- lqs(stack.loss~.,data=stackloss_new,method ="lms")
lms1 <- lqs(stack.loss~.,data=stackloss_new,method ="lms")
lms1$coefficients
lms1 <- lqs(stack.loss~.,data=stackloss_new,method ="lms")
lms1$coefficients
lms1 <- lqs(stack.loss~.,data=stackloss_new,method ="lms")
lms1$coefficients
lms1 <- lqs(stack.loss~.,data=stackloss_new,method ="lms")
lms1$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After2 <- lmsreg(stack.loss~.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After2$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After2 <- lmsreg(stack.loss~.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After2$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After2 <- lmsreg(stack.loss~.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After2$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After2 <- lmsreg(stack.loss~.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After2$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After2 <- lmsreg(stack.loss~.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After2$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After2 <- lmsreg(stack.loss~.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After2$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After2 <- lmsreg(stack.loss~.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After2$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After2 <- lmsreg(stack.loss~.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After2$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After2 <- lmsreg(stack.loss~.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After2$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After2 <- lmsreg(stack.loss~.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After2$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After2 <- lmsreg(stack.loss~.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After2$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After2 <- lmsreg(stack.loss~.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After2$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After2 <- lmsreg(stack.loss~.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After2$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After2 <- lmsreg(stack.loss~.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After2$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After2 <- lmsreg(stack.loss~.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After2$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After2 <- lmsreg(stack.loss~.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After2$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After2 <- lmsreg(stack.loss~.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After2$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After2 <- lmsreg(stack.loss~.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After2$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After2 <- lmsreg(stack.loss~.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After2$coefficients
mylm2_After1 <- lmsreg(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
mylm2_After2 <- lmsreg(stack.loss~.,data=stackloss_new)
mylm2_After1$coefficients
mylm2_After2$coefficients
# Identify influential observations
# Identify influential observations using DFFITS
DFFITS <- dffits(mylm1)
which(abs(DFFITS) > 2*sqrt(4/21))
# Index plot of DFFITS
n <- nrow(data)
plot(DFFITS)
text(1:n,dffits(mylm),lab=1:n)
# Identify influential observations using Cook's Distances
D <- cooks.distance(mylm1)
which(D >= qf(.5, 4, 21-4)) # none clearly identified as influential (though
# Index plot of Cook's Distances
plot(D, ylab = "Cook's Distance")
# Identify influential observations using DFBETAS
DFBETAS <- dfbetas(mylm1)
max.DFBETAS <- apply(abs(DFBETAS), 1, max)
which(max.DFBETAS > 2/sqrt(21))
# Determine whether any leverages are large (i.e., larger than 2p/n)
h <- hatvalues(mylm1)
which(h >= 2 * 4/21)
stackloss
stackloss_new
stackloss
#Homework6
#Question 1
library(MASS)
birthwt$race[birthwt$race!=1]<- 0
#data <- birthwt[,2:9]
#Lasso
library(glmnet)
X <- model.matrix(bwt~.,data=birthwt[,-1])
y <- birthwt$bwt
fit <- glmnet(X,y)
cvfit <- cv.glmnet(X,y)
plot(cvfit)
cv_out <- cv.glmnet(x,y,alpha=1)
bestlammin <- cv_out$lambda.min
result <- glmnet(X,y,alpha=1)
lasso.coef <- predict(result,type="coefficients",s=bestlammin)
lasso.coef
#Question 2
mylm <- lm(stack.loss~.,data=stackloss)
# Subquestion 1
# Variance inflation factor
library(car) #needed for access to vif function
vif(mylm)
# Subquestion 2
# Part a
stackloss_new <- stackloss
stackloss_new$stack.loss[20] <- 1500
stackloss_new$Water.Temp[13] <- 170
stackloss_new$Acid.Conc.[13] <- 10
mylm1 <- lm(stack.loss~.,data=stackloss_new)
mylm1 <- lm(stack.loss~Air.Flow+Water.Temp+Acid.Conc.,data=stackloss_new)
summary(mylm1)
# Part b
nrow(stackloss_new)
IF <- influence.measures(mylm1)
DFFITS1 <- IF$is.inf[,5]
DFBETAS1 <- IF$is.inf[,1:4]
HAT1 <- IF$is.inf[,8]
COOK1 <- IF$is.inf[,7]
which(DFFITS1 == TRUE)
which(DFBETAS1 == TRUE)
which(HAT1 == TRUE)
which(COOK1 == TRUE)
# Identify influential observations
# Identify influential observations using DFFITS
DFFITS <- dffits(mylm1)
which(abs(DFFITS) > 2*sqrt(4/21))
# Index plot of DFFITS
n <- nrow(data)
plot(DFFITS)
# Identify influential observations using Cook's Distances
D <- cooks.distance(mylm1)
which(D >= qf(.5, 4, 21-4)) # none clearly identified as influential (though
# Index plot of Cook's Distances
plot(D, ylab = "Cook's Distance")
# Identify influential observations using DFBETAS
DFBETAS <- dfbetas(mylm1)
max.DFBETAS <- apply(abs(DFBETAS), 1, max)
which(max.DFBETAS > 2/sqrt(21))
# Index plot of studentized residuals vs observation number
plot(rstandard(mylm1), ylab = "studentized residuals", xlab = "observation")
# No unusually large studentized residuals
# Determine whether any deleted studentized residuals exceed
# what is expected (at a .95 confidence level) for an F distribution with p
# numerator degrees of freedom and n - p denominator degrees of freedom.
which(abs(rstudent(mylm1)) >= qf(1 - .05/(2 * nrow(stackloss)), df1 = 4, df2 = 17))
# named integer(0) means that non exceeded the treshhold
data  <- c(0.11,0.11,0.11,0.19,0.21,0.22,0.24,0.25,0.31,0.18,0.27,
0.36,0.37,0.39,0.47,0.37,0.57,0.29,0.30,0.40,0.45,0.47,
0.52,0.57,1.10)
team  <- rep(c("Controls","Gallstone","Ulcer"),c(9，8，8))
team  <- rep(c("Controls","Gallstone","Ulcer"),c(9，8，8))
team  <- rep(c("Controls","Gallstone","Ulcer"),c(9,8,8))
team
group = factor(group)
anova1 <- aov(data ~ team)
team   <- factor(group)
team   <- factor(team)
anova1 <- aov(data ~ team)
summary(anova1)
data   <- c(0.11,0.11,0.11,0.19,0.21,0.22,0.24,0.25,0.31,0.18,0.27,
0.36,0.37,0.39,0.47,0.37,0.57,0.29,0.30,0.40,0.45,0.47,
0.52,0.57,1.10)
team   <- rep(c("Controls","Gallstone","Ulcer"),c(9,8,8))
team   <- factor(team)
# For F test
anova1 <- aov(data ~ team)
data   <- c(0.11,0.11,0.11,0.19,0.21,0.22,0.24,0.25,0.31,0.18,0.27,
0.36,0.37,0.39,0.47,0.37,0.57,0.29,0.30,0.40,0.45,0.47,
0.52,0.57,1.10)
team   <- rep(c("Controls","Gallstone","Ulcer"),c(9,8,8))
team   <- factor(team)
# For F test
anova1 <- aov(data ~ team)
summary(anova1)
p.adjust(anova1, method = "bonferroni")
Tukey(anova1)
TukeyHSD(anova1)
data_new <- rbind(team,data)
data_new
setwd("/Users/Wenxin_AN/Documents/Master/ada")
dat <- read.csv("hw7Q1",header = FALSE)
dat <- read.csv("hw7Q1.csv",header = FALSE)
dat
dat$Team
data_new <- data.frame(team,data)
data_new
data_new$Team
data_new$team
pairwise.t.test(data_new$team,data_new$data,p.adj="bonferroni")
pairwise.t.test(data_new$data,data_new$team,p.adj="bonferroni")
pairwise.t.test(data_new$data,data_new$team,p.adj="holm")
p.adjust(data_new$data,data_new$team, method = "bonferroni")
p.adjust(data_new, method = "bonferroni")
install.packages("agricolae")
library("agricolae", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
scheffe.test(data,team,DFerror,MSerror,Fc,alpha=0.05,group=TRUE,main = NULL,console =FALSE)
scheffe.test(data,team,alpha=0.05,group=TRUE,main = NULL,console =FALSE)
Scheffe_Test <- scheffe.test(anova1,"team",group=TRUE,main = NULL,console =FALSE)
Scheffe_Test
df <- df.residual(anova1)
MSerror <- deviance(anova1)/df
LSD.test(data_new$data,data_new$team,df,MSerror)
LSD_Test <- LSD.test(data_new$data,data_new$team,df,MSerror)
LSD_Test
Scheffe_Test <- scheffe.test(anova1,"team",alpha=0.05,group=TRUE,main = NULL,console =FALSE)
Scheffe_Test
LSD.test(data_new$data,data_new$team,df,MSerror)
LSD.test(data_new$data,data_new$team,df,MSerror)
(LSD.test(data_new$data,data_new$team,df,MSerror))
Scheffe_Test <- scheffe.test(anova1,"team",alpha=0.05,group=TRUE,main = NULL,console =FALSE)
Scheffe_Test
pairwise.t.test(data_new$data,data_new$team,p.adj="bonferroni")
TukeyHSD(anova1)
(LSD.test(data_new$data,data_new$team,df,MSerror))
(scheffe.test(anova1,"team",alpha=0.05,group=TRUE,main = NULL,console =FALSE))
install.packages("multcomp")
Dunnett_Test <- glht(anova1,linfct = mcp(group="team"))
library(multcomp)
Dunnett_Test <- glht(anova1,linfct = mcp(group="team"))
Dunnett_Test <- glht(anova1))
Dunnett_Test <- glht(anova1)
summary(Dunnett_Test)
library(agricolae)
(scheffe.test(anova1,"team",alpha=0.05,group=TRUE,main = NULL,console =FALSE))
# For simultaneous confidence interval procedures
# Bonferroni Procedure
pairwise.t.test(data_new$data,data_new$team,p.adj="bonferroni")
# Scheffe Procedure
library(agricolae)
(scheffe.test(anova1,"team",alpha=0.05,group=TRUE,main = NULL,console =FALSE))
# Fisher's Least Significant Difference
df <- df.residual(anova1)
MSerror <- deviance(anova1)/df
(LSD.test(data_new$data,data_new$team,df,MSerror))
# Tukey HSD Procedure
TukeyHSD(anova1)
bartlett.test(data ~ team)
shapiro.test(resid(anova1))
par(mfrow=c(1,2))
qqnorm(resid(anova1))
hist(resid(anova1))
kruskal.test(data,team)
library("Sleuth3")
summary(aov(ex1319$IQ~ex1319$Adoptive*ex1319$Biological))
install.packages("Sleuth3")
library("Sleuth3", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("Sleuth3")
summary(aov(ex1319$IQ~ex1319$Adoptive*ex1319$Biological))
mylm <- lm(ex1319$IQ~ex1319$Adoptive+ex1319$Biological)
mylm
anova2=aov(ex1319$IQ~ex1319$Adoptive+ex1319$Biological)
mylm <- lm(ex1319$IQ~ex1319$Adoptive+ex1319$Biological)
summary(mylm)
plot(mylm)
par(mfrow=c(1,1))
plot(mylm)
shapiro.test(resid(anova2))
par(mfrow=c(1,1))
hist(resid(anov2))
qqnorm(resid(anov2))
par(mfrow=c(1,1))
hist(resid(anova2))
qqnorm(resid(anova2))
par(mfrow=c(1,2))
hist(resid(anova2))
qqnorm(resid(anova2))
bartlett.test(ex1319$IQ~ex1319$Adoptive+ex1319$Biological)
bartlett.test(ex1319$IQ~ex1319$Adoptive*ex1319$Biological)
bartlett.test(ex1319$IQ~ex1319$Adoptive*ex1319$Biological,data=ex1319)
bartlett.test(ex1319$IQ ~ ex1319$Adoptive*ex1319$Biological,data=ex1319)
bartlett.test(IQ ~ Adoptive*Biological,data=ex1319)
ex1319$Adoptive
ex1319$Adoptive*ex1319$Biological
summary(aov(ex1319$IQ~ex1319$Adoptive*ex1319$Biological))
summary(aov(ex1319$IQ~ex1319$Adoptive*ex1319$Biological))
Controls=c(0.11,0.11,0.11,0.19,0.21,0.22,0.24,0.25,0.31)
Gallstone=c(0.18,0.27,0.36,0.37,0.39,0.47,0.37,0.57)
Ulcer=c(0.29,0.30,0.40,0.45,0.47,0.52,0.57,1.10)
plot(density(Controls),main="CCK level of Controls Group")
plot(density(Gallstone),main="CCK level of Gallstone Group")
plot(density(Ulcer),main="CCK level of Ulcer Group")
shapiro.test(Controls)$p.value
shapiro.test(Gallstone)$p.value
shapiro.test(Ulcer)$p.value
Controls=c(0.11,0.11,0.11,0.19,0.21,0.22,0.24,0.25,0.31)
Gallstone=c(0.18,0.27,0.36,0.37,0.39,0.47,0.37,0.57)
Ulcer=c(0.29,0.30,0.40,0.45,0.47,0.52,0.57,1.10)
par(mfrow=c(1,2))
plot(density(Controls),main="CCK level of Controls Group")
plot(density(Gallstone),main="CCK level of Gallstone Group")
plot(density(Ulcer),main="CCK level of Ulcer Group")
shapiro.test(Controls)$p.value
shapiro.test(Gallstone)$p.value
shapiro.test(Ulcer)$p.value
plot(density(Controls),main="CCK level of Controls Group")
plot(density(Gallstone),main="CCK level of Gallstone Group")
par(mfrow=c(1,3))
plot(density(Controls),main="CCK level of Controls Group")
plot(density(Gallstone),main="CCK level of Gallstone Group")
plot(density(Ulcer),main="CCK level of Ulcer Group")
TukeyHSD(anova2)
anova3=aov(ex1319$IQ~ex1319$Adoptive*ex1319$Biological)
TukeyHSD(anova3)
anova3=aov(ex1319$IQ~ex1319$Biological*ex1319$Adoptive)
anova4=aov(ex1319$IQ~ex1319$Biological*ex1319$Adoptive)
TukeyHSD(anova4)
ano=as.data.frame(summary(anova3)[[1]])
inf=rbind(ano[1,2]/sum(ano[,2]),ano[2,2]/sum(ano[,2]),ano[3,2]/sum(ano[,2]),ano[4,2]/sum(ano[,2]))
colnames(inf)=c("Accountable Percentage")
rownames(inf)=c("adoptive","biological","adoptive&biological","Residuals")
inf
anova3=aov(ex1319$IQ~ex1319$Adoptive*ex1319$Biological)
ano=as.data.frame(summary(anova3)[[1]])
inf=rbind(ano[1,2]/sum(ano[,2]),ano[2,2]/sum(ano[,2]),ano[3,2]/sum(ano[,2]),ano[4,2]/sum(ano[,2]))
colnames(inf)=c("Accountable Percentage")
rownames(inf)=c("adoptive","biological","adoptive&biological","Residuals")
inf
